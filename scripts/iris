#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IRIS_HOME=${IRIS_HOME:-`cd $DIR/.. && pwd -P`}
NODEDIR=$IRIS_HOME/nodejs
CONFDIR=$IRIS_HOME/conf
SVC_DIR=$NODEDIR/services
SVC_CONF=$CONFDIR/services.conf
LOGDIR=$IRIS_HOME/logs
PIDFILE=$LOGDIR/iris.pid
mkdir -p $LOGDIR

function iris_pid {
    pid=''
    if [ -e "$PIDFILE" ]; then
        pid=$(xargs ps u -p < $PIDFILE | awk '!/PID/ {print $2}')
    fi
    echo $pid
}

function killtree {
    local _pid=$1
    local _sig=${2-TERM}
    for _child in $(ps -o pid,ppid -ax | awk "\$2==$_pid{print \$1}"); do
        killtree ${_child} ${_sig}
    done
    kill -${_sig} ${_pid}
}

function start_services {
    ( # Subshell
        cat $SVC_CONF | sed 's/[#;].*$//' | while read line; do
            [ -z "$line" ] && continue
            service=($line)
            log=$LOGDIR/${service[1]}.log
            echo ${service[1]} $log
            echo NODE_PORT=${service[0]} node $SVC_DIR/${service[2]} $CONFDIR/${service[3]} # > $log &
            echo "Started [${service[1]}]"
        done
        wait
    ) &
    irispid=$!
}

function iris_cmd_start {
    pid=`iris_pid`
    if [ -n "$pid" ]; then
        echo "Iris is already running (pid `cat $PIDFILE`)"
    else
        start_services
        if [ -n "$irispid" ]; then
            echo $irispid > $PIDFILE
            iris_cmd_status
        else
            echo "Error launching Iris"
        fi
    fi
}

function iris_cmd_stop {
    pid=`iris_pid`
    if [ -n "$pid" ]; then
        # Kill children
        killtree $pid
        echo "Iris successfully stopped."
    else
        echo "Iris is not running. Nothing to stop."
    fi
    # Handle both standard shutdown and when Iris is not running but the
    # pid file still exists.
    if [ -e "$PIDFILE" ]; then
        rm $PIDFILE
    fi
}

function iris_cmd_install {
    cd $IRIS_HOME
    installlog=$LOGDIR/install.log
    [ -e "$installlog" ] && rm $installlog
    # Fetch git-managed modules
    
    echo "Installing Git modules..."
    git submodule init 2>&1 >> $installlog
    git submodule update 2>&1 >> $installlog

    echo "Installing Node modules..."
    # Install Node.js dependencies
    cd $IRIS_HOME/nodejs
    npm install 2>&1 >> $installlog
    
    echo "Compiling jQuery library..."
    # Compile jQuery library
    cd $IRIS_HOME/external/jquery
    git submodule update --init 2>&1 >> $installlog
    make 2>&1 >> $installlog
    
    echo "Compiling Fastbit... (Hang on. This might take a while.)"
    # Install FastBit
    cd $IRIS_HOME/fastbit
    ./configure --prefix $IRIS_HOME 2>&1 >> $installlog
    make 2>&1 >> $installlog # Now take a [long] coffee break
    make check 2>&1 >> $installlog
    make install 2>&1 >> $installlog

}

function iris_cmd_help {
    echo 'iris [options] <command> [<arguments>]
    
Available commands:
    help        This command
    install     Install dependencies required by Iris
    open        Open up an Iris session (Mac only, for now)
    start       Start Iris
    stop        Stop Iris
    restart     Restart Iris
    status      Check whether or not Iris is running
'
}

function iris_cmd_open {
    # TODO: Actually get the web server from configuration
    open http://localhost:4747
}

function iris_cmd_status {
    pid=`iris_pid`
    if [ -z "$pid" ]; then
        echo "Iris is not running."
    else
        nproc=`ps -o ppid -ax | grep -c $pid`
        echo "Iris is running as process $pid with $nproc services."
    fi
}

function iris_cmd_restart {
    iris_cmd_stop
    iris_cmd_start
}

cmd=$1
if [ `declare -f iris_cmd_$cmd | wc -l` -gt 1 ]; then
    eval iris_cmd_$cmd
else
    echo "Unrecognized command. Try 'iris help'"
fi
